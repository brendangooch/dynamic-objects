BUGS:
    (none)


v2.0.0 - completely refactored
    
    updated with latest config templates

    DynamicUnit vastly simplified
        implemented Decorator pattern for additional functionality (ie inverted unit returns 1 -> 0)

    refactored other classes to reflect changes to DynamicUnit

    created separate DynamicVector and DynamicBezier classes
    DynamicPosition now uses those classes internally

    added speed() method to number, vector, bezier, position so client can set speed OR duration
    added changeBy()/moveBy() methods to number, vector, bezier, position as a convenience to client
    
    TESTED ALL FUNCTIONALITY VISUALLY + ALL JEST TESTS PASS



v3.0.0

    updated SimpleGameLoop package to v4.0.0 which removes turnOn and turnOff methods from iUpdateable interface
    made turnOn/Off methods private in each class that implements iUpdateable
    this behaviour should be used internally only

    completely re-factored core DynamicObjects:
        unit
        number
        vector
        bezier
    
    implemented the Template Method Pattern to vastly reduce code duplication

    added clone() method to DynamicUnit, BaseDynamicUnit & decorators
        clone() returns a new iDynamicUnit object with the same ease and duration applied (but not internal state)
    
    changeTo() method now returns the set or calculated duration, which is very useful for the client

    removed changeBy/moveBy() methods as easily implemented by client in any case and not many use cases in reality

    added:

    DynamicString
        a user-defined, changeable string that lengthens over time from empty to full string
        client can set duration and ease
        useful effect for a game console window

    DynamicColor
        a color in rgb() string format that can change over time
        useful effect for game timer
    
    DynamicRotation
        contains a dynamic number
        client can rotateTo() a rotation, which behaves like changeTo() on DynamicNumber
        OR spinTo(), passing in the number of spins (negative for anti-clockwise), which adds numSpins onto total rotation
        the additional "spin" is then removed on update complete. 
        Rotation.current appears the same but no longer unwinds the spin on next rotation.

    DynamicRectangle
        most of the package functionality in one composite class
        consists of DymamicPosition, DynamicRotation and multiple DynamicNumbers
        uses the same syntax and style as the other DynamicObjects
        contains methods to set the following properties of a rectangle instantly or dynamically:
            position
            rotation
            opacity
            scale
            width
            height
            visible


    TESTED ALL FUNCTIONALITY VISUALLY + ALL JEST TESTS PASS


v4.0.0 - scrapped

v5.0.0

    package completely re-written
    
    added:
        DynamicDimension
        DynamicOpacity
        DynamicScale
        DynamicSequence
        DynamicText (replaces DynamicString)
        DynamicTimer
        DynamicVisibility
        DynamicWaveForm
    
    ALL objects pass their updated jest tests
    tested all new functionality visually in browser

v6.0.0

    package completely re-written again
    scrapped dynamic base object in favour of composition over inheritance

    removed:
        dynamic rectangle - functionality added directly to screen entity object
        dynamic opacity, scale, dimension - functionality added to dynamic number class
        dynamic visibility - behaviour added to dynamic waveform

    moved Sequence and Timer to their own packages as they have unique behaviour

    added additional functionality to all dynamic objects
        object can be started and stopped
        all functionality can be turned on or off
        client can step the object forwards or backwards by a fixed percent
        all objects can call an optional callback function on complete
        objects can tick() forwards at a consistent rate instead of variable update() so can be used with a fixed timestep loop
        objects can be rewound to the beginning (previous state)
        current update cycle can be ended immediately
        the speed at which the object updates/ticks/steps can be altered

    added to unit:
        floor the current value
        invert the current value
        adjust the scale (amplitude) of the current value

    added to Number/Vector/Bezier/Position:
        round()
        toPlaces()
        max(...)
        min(...)
    
    added to DynamicWaveForm:
        ...